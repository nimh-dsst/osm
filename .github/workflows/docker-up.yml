name: Execute `docker compose up`

on:
  workflow_call:
    inputs:
      parent_trigger:
        type: string
        required: true
        description: The environment where to deploy. Usually `push` or `workflow_dispatch`

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.2
        
      - name: Set stage environment
        run: |
          echo "dev_environment=staging" >> $GITHUB_ENV
        if: ${{ inputs.parent_trigger == 'push' }}
        
      - name: Set prod environment
        run: |
          echo "dev_environment=production" >> $GITHUB_ENV
        if: ${{ inputs.parent_trigger == 'workflow_dispatch' }}
        
      - name: Get image tag
        run: |
          echo "RELEASE_TAG=$(git rev-parse --short ${{ github.sha }})" >> $GITHUB_ENV

      - name: Configure SSH
        env:
          PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SSH_PROD_HOST: ${{ secrets.SSH_PROD_HOST }}
          SSH_STAGE_HOST: ${{ secrets.SSH_STAGE_HOST }}
          DEPLOY_USERNAME: ${{ secrets.DEPLOYMENT_USERNAME }}
        run: |
          mkdir -p ~/.ssh/
          echo "$PRIVATE_KEY" > ~/.ssh/aws
          chmod 600 ~/.ssh/aws
          cat >>~/.ssh/config <<END
          Host staging
            HostName ${SSH_STAGE_HOST}
            User ${DEPLOY_USERNAME}
            IdentityFile ~/.ssh/aws
            StrictHostKeyChecking no
          Host production
            HostName ${SSH_PROD_HOST}
            User ${DEPLOY_USERNAME}
            IdentityFile ~/.ssh/aws
            StrictHostKeyChecking no
          END

      - name: Log in to ECR
        env:
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          DEV_ENVIRONMENT: ${{ env.dev_environment }}
        run: |
          ssh ${DEV_ENVIRONMENT} "aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com"
          
      - name: Run `docker compose up` on remote staging host
        if: ${{ inputs.parent_trigger == 'push' }}
        env:
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          MONGODB_URI: ${{ secrets.MONGODB_URI }}
          HOST_URI: ${{ secrets.SSH_STAGE_HOST }}
          RELEASE_TAG: ${{ env.RELEASE_TAG }}
        run: |
          ssh staging MONGODB_URI="${MONGODB_URI}" HOST_URI="${HOST_URI}" RELEASE_TAG="${RELEASE_TAG}" AWS_ACCOUNT_ID="${AWS_ACCOUNT_ID}" AWS_REGION="${AWS_REGION}" docker compose -f - up -d < ./web/deploy/docker-compose.yaml
          
      - name: Run `docker compose up` on remote production host
        if: ${{ inputs.parent_trigger == 'workflow_dispatch' }}
        env:
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          MONGODB_URI: ${{ secrets.MONGODB_URI }}
          HOST_URI: ${{ secrets.SSH_STAGE_HOST }}
          RELEASE_TAG: ${{ env.RELEASE_TAG }}
        run: |
          ssh production MONGODB_URI="${MONGODB_URI}" HOST_URI="${HOST_URI}" RELEASE_TAG="${RELEASE_TAG}" AWS_ACCOUNT_ID="${AWS_ACCOUNT_ID}" AWS_REGION="${AWS_REGION}" docker compose -f - up -d < ./web/deploy/docker-compose.yaml
